1)

#include<stdio.h>
#include<stdlib.h>
#define MALLOC(p,n,type)                \
{                                       \
    p=(type*)malloc(n*sizeof(type));    \
    if(p==NULL){                        \
        printf("Insufficient memory");  \
        exit(0);                        \
    }                                   \
}

typedef struct{
    char *dayName;
    char *date;
    char *activity;
} Day;

void create(Day *calendar)
{
    int i=0;
    for(i=0;i<7;i++){
        MALLOC(calendar[i].dayName,20,char);
        MALLOC(calendar[i].date,20,char);
        MALLOC(calendar[i].activity,100,char);
    }
}
void read(Day *calendar)
{
    int i=0;
    for(i=0;i<7;i++){
    printf("Enter date for the day: %d", i+1);
    scanf("%s",calendar[i].date);
    printf("Enter day for the day: %d", i+1);
    scanf("%s",calendar[i].dayName);
    printf("Enter activity for the day: %d", i+1);
    scanf("[^\n]s",calendar[i].activity);
    }
}
void display(Day *calendar){
    int i=0;
    printf("report");
    for(i=0;i<7;i++){
        printf("Day %d \n", i+1);
        printf("Date: %s \n", calendar[i].date);
        printf("Day Name: %s \n", calendar[i].dayName);
        printf("Activity: %s \n", calendar[i].activity);
    }
}
int main(){
    Day *calendar;
    MALLOC(calendar,7,Day);
    create(calendar);
    read(calendar);
    display(calendar);
    int i=0;
    for(i=0;i<7;i++){
        free(calendar[i].date);
        free(calendar[i].dayName);
        free(calendar[i].activity);
    }
    return 0;
}
2)

#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#define MAX 5

int stack[MAX];
int top=-1;
// Function to push an element onto the stack
void push(int value)
{
    if(top>=MAX-1) 
	{
        	printf("Stack Overflow: Cannot push element onto a full stack.\n");
   	} 
	else 
	{
		stack[++top] = value;
		printf("Pushed %d onto the stack.\n", value);
    	}
}

// Function to pop an element from the stack
int pop() 
{
    if (top==-1) 
	{
		printf("Stack Underflow: Cannot pop from an empty stack.\n");
		return -1; // Return a sentinel value indicating failure
        } 
	else 
	{
        return stack[top--];
   	}
}

// Function to check if a string is a palindrome using a stack
bool isPalindrome(char str[]) 
{
    int length = strlen(str);
    int i;

    // Push the first half of the characters onto the stack
    for (i = 0; i < length / 2; i++) 
	{
        	push(str[i]);
    	}

    // Compare the second half of the characters with the stack
    for (i = (length + 1) / 2; i < length; i++) 
	{
		if (str[i] != pop())
		 {
		    return false; // Not a palindrome
        	}
    	}

    return true; // It's a palindrome
}

// Function to display the stack
void displayStack() 
{
    int i;
    if (top == -1)
    {
        printf("Stack is empty.\n");
    } 
    else 
    {
        printf("Stack elements:\n");
        for(i = 0; i <= top; i++) 
	{
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

int main() 
{
    int choice, element;
    char str[100];

    while (1) 
    {
        printf("\nStack Operations Menu:\n");
        printf("1. Push Element\n");
        printf("2. Pop Element\n");
        printf("3. Check Palindrome\n");
        printf("4. Display Stack\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) 
	{
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &element);
                push(element);
                break;
            case 2:
                element = pop();
                if (element != -1) 
		{
                    printf("Popped element: %d\n", element);
                }
                break;
            case 3:
                printf("Enter a string: ");
                scanf("%s", str);
                if(isPalindrome(str)) 
		{
                    printf("The string is a palindrome.\n");
                } else 
		{
                    printf("The string is not a palindrome.\n");
                }
                break;
            case 4:
                displayStack();
                break;
            case 5:
                printf("Exiting the program.\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}


3)

#include<stdio.h>
#include<string.h>
int in_prec(char);
int stack_prec(char);
void convert(char *,char *);
void main()
{
    char in[30],post[30];
    printf("Enter a valid infix expression\n");
    scanf("%s",in);
    convert(in,post);
    printf("Postfix expression is %s",post);
}
int  in_prec(char sym)
{
    switch(sym)
    {
         case '+':
         case '-': return 1;
         case'*':
         case '/': return 3;
         case '$':
         case '^': return 6;
         case '(': return 9;
         case ')': return 0;
         default: return 7;
    }
}
int stack_prec(char sym)
{
    switch(sym)
    {
         case '+':
         case '-': return 2;
         case '*':
         case '/': return 4;
         case '$':
         case '^': return 5;
          case '(': return 0;
          case '#': return -1;
          default : return 8;
    }
}
void convert(char *in,char *post)
{
    char s[30],sym;
    int top=-1,i,j=0;
    s[++top]='#';
    for(i=0;in[i]!='\0';i++)
    {
         sym=in[i];
         while(stack_prec(s[top])>in_prec(sym))
         {
               post[j++]=s[top--];
         }
         if(stack_prec(s[top])!=in_prec(sym))
                s[++top]=sym;
         else
           top--;
    }
    while(s[top]!='#')
    post[j++]=s[top--];
    post[j]='\0';
}


4)


#include<stdio.h>
#include<math.h>
#include<stdlib.h>
int s[20],top=-1;
int evaluate(char *);
void push(int);
int pop();
void main()
{
    int res;
    char post[30];
    printf("Enter a valid postfix expression\n");
    scanf("%s",post);
    res=evaluate(post);
    printf("Result of expression is %d",res);
}
int evaluate(char *post)
{
    int i,op1,op2,res,x;
    char sym;
    for(i=0;post[i]!='\0';i++)
    {
         sym=post[i];
         if(isalpha(sym))
         {
              printf("Enter value for %c:",sym);
              scanf("%d",&x);
              push(x);
         }
         else if(isdigit(sym))
         push(sym-'0');
         else
         {
              op2=pop();
              op1=pop();
              switch(sym)
              {
                   case '+':res=op1+op2;
                   break;
                   case '-':res=op1-op2;
                   break;
                   case '*':res=op1*op2;
                   break;
                   case '/':res=op1/op2;
                   break;
                   case '^':res=pow(op1,op2);
                   break;
default:printf("Invalid operator in the expression is %c\n",sym);
               exit(0);
          }
          push(res);
    }
}
    return(pop());
}
void push(int item)
{
    top++;
    s[top]=item;
}
int pop()
{
    return(s[top--]);
}




5)



#include<stdio.h>
void toh(int n,char s, char a,char d){
    if(n==1){
        printf("Move disk 1 from %c to%c\n",s,d);
    }
    toh(n-1,s,d,a);
    printf("Move disk %d from %c to %c\n",n,s,d);
    toh(n-1,a,s,d);
}

void main(){
    
}




6)


#include <stdio.h>
#include<stdlib.h>
#include <stdio_ext.h>
#define MAX 3

char cq[MAX];
int front = -1, rear = -1;

void insert(char);
void delete();
void display();
void main()
{
             int ch;
             char item;
             while(1)
             {
                            printf("\n\n~~Main Menu~~");
                            printf("\n==> 1. Insertion and Overflow Demo");
                            printf("\n==> 2. Deletion and Underflow Demo");
                            printf("\n==> 3. Display");
                            printf("\n==> 4. Exit");
                            printf("\nEnter Your Choice: ");
                            scanf("%d",&ch);
                            
                           switch(ch)
                          {
                                           case 1:        printf("\n\nEnter the element to be inserted: ");
                                                              scanf( "%c", &item);
                                                              insert(item);
                                                              break;
                                           case 2:        delete();
                                                              break;
                                           case 3:        display();
                                                              break;
                                            case 4:       exit(0);
                                            default:      printf("\n\nPlease enter a valid choice");
                            }
               }
}

void insert(char item)
{
                 if(front == (rear+1)%MAX)
                 {
                              printf("\n\n~~Circular Queue Overflow~~");
                 }
                 else
                 {
                             if(front == -1)
                                             front = rear = 0;
                             else
                                              rear = (rear+1)%MAX;
                             cq[rear] = item;
                  }
}

void delete()
{
                char item;
                if(front == -1)
                {
                              printf("\n\n~~Circular Queue Underflow~~");
                }
                else
                {
                               item = cq[front];
                               printf("\n\nDeleted element from the queue is: %c ",item );
                               

                               if(front == rear) //only one element
                                                front = rear = -1;
                               else
                                               front = (front+1)%MAX;
                 }
}


void display ()
{
                   int i ;
                   if(front == -1)
                   {
                                 printf("\n\nCircular Queue Empty");
                   }
                   else
                   {
                                printf("\nCircular Queue contents are:\n");
                                printf("Front[%d]-> ", front);
                               for(i = front; i != rear ; i = (i+1)%MAX)
                               {
                                                   printf(" %c", cq[i]);
                               }
                               printf(" %c", cq[i]);
                               printf(" <-[%d]Rear", rear);
                    }
}



7)


#include<stdio.h>
#include<stdlib.h>

struct node
{
    char usn[25],name[25],branch[25];
    int sem;
    long int phone;
    struct node *link;
};
typedef struct node * NODE;

NODE start = NULL;
int count=0;


NODE create()
{
    NODE snode;
    snode = (NODE)malloc(sizeof(struct node));

    if(snode == NULL)
    {
        printf("\nMemory is not available");
        exit(1);
    }
    printf("\nEnter the usn,Name,Branch, sem,PhoneNo of the student:");
scanf("%s %s %s %d %ld",snode->usn, snode->name, snode->branch, &snode->sem, &snode->phone);
    snode->link=NULL;
    count++;
    return snode;
}

NODE insertfront()
{
    NODE temp;
    temp = create();
    if(start == NULL)
    {
           return temp;
    }

    temp->link = start;
    return temp;
}


NODE deletefront()
{
    NODE temp;
    if(start == NULL)
    {
        printf("\nLinked list is empty");
        return NULL;
    }

    if(start->link == NULL)
    {
            printf("\nThe Student node with usn:%s is deleted ",start->usn);
            count--;
            free(start);
            return NULL;
    }
    temp = start;
    start = start->link;
    printf("\nThe Student node with usn:%s is deleted",temp->usn);
    count--;
    free(temp);
    return start;
}

NODE insertend()
{
    NODE cur,temp;
    temp = create();

    if(start == NULL)
    {
      return temp;
    }
    cur = start;
    while(cur->link !=NULL)
    {
         cur = cur->link;
    }
    cur->link = temp;
    return start;
}

NODE deleteend()
{
     NODE cur,prev;
     if(start == NULL)
     {
        printf("\nLinked List is empty");
        return NULL;
     }

     if(start->link == NULL)
     {
        printf("\nThe student node with the usn:%s is deleted",start->usn);
        free(start);
        count--;
        return NULL;
     }

     prev = NULL;
     cur = start;
     while(cur->link!=NULL)
     {
         prev = cur;
         cur = cur->link;
     }

      printf("\nThe student node with the usn:%s is deleted",cur->usn);
      free(cur);
      prev->link = NULL;
      count--;
      return start;
}

void display()
{
    NODE cur;
    int num=1;


    if(start == NULL)
    {

        printf("\nNo Contents to display in SLL \n");
        return;
    }
    printf("\nThe contents of SLL: \n");
    cur = start;
    while(cur!=NULL)
    {
       printf("\n||%d|| USN:%s| Name:%s| Branch:%s| Sem:%d| Ph:%ld|",num,cur->usn, cur->name,cur->branch, cur->sem,cur->phone);
       cur = cur->link;
       num++;
    }
    printf("\n No of student nodes is %d \n",count);
}

void stackdemo()
{
   int ch;
   while(1)
   {
     printf("\n~~~Stack Demo using SLL~~~\n");
     printf("\n1:Push operation \n2: Pop operation \n3: Display \n4:Exit \n");
     printf("\nEnter your choice for stack demo");
     scanf("%d",&ch);

     switch(ch)
     {
        case 1: start = insertfront();
                break;
        case 2: start = deletefront();
                break;
        case 3: display();
               break;
       default : return;
     }
   }
   return;
}

int main()
{
    int ch,i,n;
    while(1)
    {
        printf("\n~~~Menu~~~");
        printf("\nEnter your choice for SLL operation \n");
        printf("\n1:Create SLL of Student Nodes");
        printf("\n2:DisplayStatus");
        printf("\n3:InsertAtEnd");
        printf("\n4:DeleteAtEnd");
        printf("\n5:Stack Demo using SLL(Insertion and Deletion at Front)");
        printf("\n6:Exit \n");
        printf("\nEnter your choice:");
        scanf("%d",&ch);

        switch(ch)
        {
        case 1 : printf("\nEnter the no of students:    ");
                 scanf("%d",&n);
                 for(i=1;i<=n;i++)
                    start = insertfront();
                 break;

        case 2: display();
                break;

        case 3: start = insertend();
                break;

        case 4: start = deleteend();
                break;

        case 5: stackdemo();
                break;

        case 6: exit(0);

        default: printf("\nPlease enter the valid choice");

        }
    }
}
